import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/authOptions";
import { prisma } from "@/lib/prisma";
import { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getServerSession(req, res, authOptions);

  if (!session || !session.user?.id) {
    return res.status(401).json({ error: "Nicht eingeloggt" });
  }

  if (req.method !== "GET") {
    return res.status(405).json({ error: "Methode nicht erlaubt" });
  }

  const { companyId } = req.query;

  try {
    // ðŸ”’ PRIVAT: Nur eigene
    if (!companyId) {
      const docs = await prisma.editorDocument.findMany({
        where: {
          ownerId: session.user.id,
          visibility: "PRIVATE",
        },
        orderBy: { updatedAt: "desc" },
      });

      return res.status(200).json({ success: true, documents: docs });
    }

    // ðŸ‘¥ TEAM: Nur wenn zur Firma gehÃ¶rig
    const isMember = await prisma.user.findFirst({
      where: {
        id: session.user.id,
        companyId: companyId as string,
      },
    });

    if (!isMember) {
      return res.status(403).json({ error: "Kein Zugriff auf diese Firma" });
    }

    const docs = await prisma.editorDocument.findMany({
      where: {
        companyId: companyId as string,
        visibility: { in: ["TEAM", "SHARED"] }, // ggf. spÃ¤ter differenzieren
      },
      orderBy: { updatedAt: "desc" },
    });

    return res.status(200).json({ success: true, documents: docs });

  } catch (error) {
    console.error("Fehler beim Laden:", error);
    return res.status(500).json({ error: "Fehler beim Laden der Dokumente" });
  }
}
