generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified DateTime?
  password      String?
  name          String?
  nickname      String?
  image         String?
  verified      Boolean  @default(false)
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  resetTokens   PasswordResetToken[]
  hasChosenMode Boolean @default(false)
  promotedToAdmin Boolean @default(false)
  lastLogin     DateTime?

  companyId   String?
  company     Company?   @relation(fields: [companyId], references: [id])
  role        String?    
  invited     Boolean    @default(false)
  accepted    Boolean    @default(true)

  showName     Boolean  @default(true)
  showNickname Boolean  @default(false)
  showEmail    Boolean  @default(false)

  accounts    Account[]
  sessions    Session[]
  shifts      Shift[]

  createdInvitations Invitation[] @relation("UserToInvitations")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  users       User[]
  settings    CompanySettings?
  payRules    PayRule[]
  shifts      Shift[]
  invitations Invitation[]
  accessCodes AccessCode[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  userId     String   @unique
  token      String   @unique
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  ip        String
  timestamp DateTime
}

model SuperadminBoardEntry {
  id               String    @id @default(cuid())
  title            String
  status           String
  category         String[]
  notes            String?
  createdAt        DateTime  @default(now())
  completedAt      DateTime?
  updatedByImport  Boolean   @default(false)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CompanySettings {
  id                String   @id @default(cuid())
  companyId         String   @unique
  themeName         String   @default("Classic Duo")
  useCustomColors   Boolean  @default(false)
  primaryColor      String?
  accentColor       String?
  bgLight           String?
  bgDark            String?
  textColor         String?

  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model PayRule {
  id        String   @id @default(cuid())
  companyId String
  title     String
  rate      Float
  createdAt DateTime @default(now())

  company   Company  @relation(fields: [companyId], references: [id])
}

model Shift {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  startTime   DateTime
  endTime     DateTime
  breakMinutes Int     @default(0)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Invitation {
  id           String   @id @default(cuid())
  token        String   @unique
  companyId    String
  role         String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  used         Boolean  @default(false)
  createdBy    String?
  note         String?
  type         String
  password     String?
  createdById  String?

  printTitle   String?
  printText    String?
  printLogo    String?

  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser   User?    @relation("UserToInvitations", fields: [createdById], references: [id])
}

model AccessCode {
  id              String   @id @default(cuid())
  code            String
  companyId       String
  role            String
  validFrom       DateTime
  validUntil      DateTime
  requirePassword Boolean  @default(true)
  password        String?
  createdAt       DateTime @default(now())

  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([code, companyId], name: "code_companyId")
}
