// ===========================
// üß© GENERATOR & DATENQUELLE
// ===========================
// Der Generator legt fest, welches Prisma-Client-Tool erzeugt wird.
// ‚Äûprisma-client-js‚Äú ist die Standard-Bibliothek f√ºr JavaScript/TypeScript-Projekte.
// Der Client wird automatisch beim ‚Äûprisma generate‚Äú-Befehl erstellt.
generator client {
  provider = "prisma-client-js"
}

/// Die Datenquelle definiert, mit welcher Datenbank Prisma verbunden ist.
/// Der Provider `postgresql` bedeutet, dass eine PostgreSQL-Datenbank verwendet wird.
/// Die Verbindung erfolgt √ºber die Umgebungsvariable `DATABASE_URL` aus der `.env`-Datei.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// üè∑Ô∏è ENUMS
// ===========================
// Enums (Kurzform f√ºr ‚ÄûEnumerationen‚Äú) sind vordefinierte Listen m√∂glicher Werte.
// Sie helfen dabei, bestimmte Felder auf festgelegte Optionen zu beschr√§nken.
// Beispiel: W√§hrungen, Zeitintervalle, Regelarten, Sichtbarkeiten etc.
// Enums verbessern die Datenintegrit√§t und erleichtern die Validierung im Code.

/// W√§hrungen f√ºr sp√§tere Internationalisierung
/// Diese Enum wird in der Regel-Logik verwendet, z.‚ÄØB. f√ºr Bonuszahlungen
/// Du kannst diese Liste bei Bedarf sp√§ter erweitern (z.‚ÄØB. CHF, PLN, ‚Ä¶)
enum Currency {
  EUR  /// Euro
  USD  /// US-Dollar
  GBP  /// Britisches Pfund
}

/// Wie oft eine Regel maximal angewendet werden darf
/// Z.‚ÄØB. "nur einmal pro Monat" oder "t√§glich maximal 2√ó"
enum FrequencyUnit {
  NONE     /// unbegrenzt oft anwendbar
  DAILY    /// maximal einmal pro Tag
  WEEKLY   /// maximal einmal pro Woche
  MONTHLY  /// maximal einmal pro Monat
  YEARLY   /// maximal einmal pro Jahr
}

/// Art des Effekts, der bei einer Regel angewendet wird
/// Z.‚ÄØB. ein fixer Betrag, ein prozentualer Zuschlag oder ein Satz pro Einheit
enum EffectKind {
  FIXED    /// fixer Betrag, z.‚ÄØB. 150‚ÄØ‚Ç¨ Bonus
  PERCENT  /// prozentual, z.‚ÄØB. 25‚ÄØ% Zuschlag
  RATE     /// fester Betrag pro Einheit, z.‚ÄØB. 2‚ÄØ‚Ç¨ pro Stunde
}

/// Bezug f√ºr Berechnungen innerhalb von Regeln oder Effekten.
/// Gibt an, worauf sich ein Wert bezieht ‚Äì z.‚ÄØB. auf das Grundgehalt oder auf gearbeitete Stunden.
enum ReferenceType {
  BASE_SALARY     /// Bezug auf das vertragliche Grundgehalt
  ACTUAL_HOURS    /// Bezug auf tats√§chlich geleistete Stunden
  FIXED_AMOUNT     /// Fest definierter Betrag (z.‚ÄØB. 100‚ÄØ‚Ç¨)
  WEEKLY_HOURS    /// Bezug auf vertragliche Wochenarbeitszeit
  SALES_VOLUME    /// Bezug auf Umsatzvolumen (z.‚ÄØB. f√ºr Provisionen)
  OVERTIME_HOURS  /// Bezug auf √úberstunden
  SHIFT_COUNT     /// Anzahl geleisteter Schichten
}

/// Vergleichsoperatoren f√ºr Bedingungen innerhalb von Regeln.
/// Wird verwendet, um z.‚ÄØB. ‚Äûmonatlich = Dezember‚Äú oder ‚ÄûStunden > 10‚Äú auszudr√ºcken.
enum Operator {
  EQ       /// Gleich ( = )
  NEQ      /// Ungleich ( ‚â† )
  GT       /// Gr√∂√üer als ( > )
  GTE      /// Gr√∂√üer oder gleich ( ‚â• )
  LT       /// Kleiner als ( < )
  LTE      /// Kleiner oder gleich ( ‚â§ )
  IN       /// Wert befindet sich in einer Liste
  NOT_IN   /// Wert befindet sich nicht in einer Liste
  BETWEEN  /// Wert liegt zwischen zwei Grenzen (inklusive oder exklusiv)
}

/// Regel-Typen f√ºr klassische Lohn- oder Verg√ºtungsregeln.
/// Wird in `PayRule` verwendet, um die Art der Regel zu unterscheiden.
enum RuleKind {
  PAY     /// Standardzahlung ‚Äì z.‚ÄØB. Stundenlohn oder Monatsgehalt
  BONUS   /// Bonusregel ‚Äì z.‚ÄØB. Zuschl√§ge f√ºr Nachtarbeit oder Feiertage
  SPECIAL /// Sonderzahlung ‚Äì z.‚ÄØB. Weihnachtsgeld, Jubil√§umspr√§mien
}

/// Art der klassischen Lohnregel ‚Äì legt fest, ob eine Regel auf Stundenbasis
/// oder als monatliche Pauschale angewendet wird.
enum PayRuleType {
  HOURLY   /// Regel gilt pro Stunde (z.‚ÄØB. 15‚ÄØ‚Ç¨/h)
  MONTHLY  /// Regel gilt als Monatsbetrag (z.‚ÄØB. 2.500‚ÄØ‚Ç¨/Monat)
}

/// Sichtbarkeit von Dokumenten, z.‚ÄØB. im Editor-System oder bei Freigaben.
/// Gibt an, wer auf ein Dokument zugreifen darf.
enum Visibility {
  PRIVATE /// Nur f√ºr den Ersteller sichtbar
  TEAM    /// Sichtbar f√ºr das eigene Team oder Unternehmen
  SHARED  /// Freigegeben f√ºr bestimmte Personen oder Gruppen
  PUBLIC  /// √ñffentlich sichtbar (z.‚ÄØB. √ºber Link)
}

// ===========================
// üë• USER, AUTH, SESSION
// ===========================
// In diesem Abschnitt werden alle Modelle rund um Benutzer, Logins, Sessions
// und Authentifizierung definiert. Dazu geh√∂ren:
// - User: zentrale Nutzerinformationen
// - Account: OAuth-/Login-Verkn√ºpfungen (Google, GitHub etc.)
// - Session: gespeicherte Login-Sitzungen
// - PasswordResetToken, VerificationCode, VerificationToken:
//   f√ºr Passwort-Zur√ºcksetzen, Verifizierung und Login-Schutz


/// Nutzerprofil mit allen relevanten Informationen zum Benutzer.
/// Beinhaltet Login-Daten, Teamzugeh√∂rigkeit, Sichtbarkeitseinstellungen und Historie.
model User {
  id              String   @id @default(cuid()) /// Interne ID des Nutzers
  email           String   @unique              /// E-Mail-Adresse (Login-Identifikation)
  emailVerified   DateTime?                    /// Zeitpunkt der Verifizierung (wenn vorhanden)
  password        String?                       /// Optional: Passwort (nur bei E-Mail-Login)
  name            String?                       /// Anzeigename (z.‚ÄØB. Max Mustermann)
  nickname        String?                       /// Optionaler Spitzname f√ºr Teamansicht
  image           String?                       /// Avatar oder Profilbild-URL
  verified        Boolean  @default(false)      /// Interne Verifizierung (nicht gleich E-Mail)
  isAdmin         Boolean  @default(false)      /// Systemweiter Admin-Status
  createdAt       DateTime @default(now())      /// Erstellungszeitpunkt
  lastLogin       DateTime?                     /// Letzter Login (zur Analyse)
  hasChosenMode   Boolean  @default(false)      /// Onboarding abgeschlossen?
  promotedToAdmin Boolean  @default(false)      /// Durch System automatisch bef√∂rdert?

  companyId       String?                       /// Fremdschl√ºssel zur Firma (optional)
  company         Company? @relation(fields: [companyId], references: [id])
  role            String?                       /// Teamrolle (VIEWER, EDITOR, ADMIN etc.)
  invited         Boolean  @default(false)      /// Wurde √ºber Einladung hinzugef√ºgt?
  accepted        Boolean  @default(true)       /// Hat die Einladung angenommen?

  showName        Boolean  @default(true)       /// Anzeigename im Team sichtbar?
  showNickname    Boolean  @default(false)      /// Spitzname sichtbar?
  showEmail       Boolean  @default(false)      /// E-Mail-Adresse sichtbar?

  // üîê Sicherheits- und Auth-Beziehungen
  resetTokens            PasswordResetToken[]         /// Passwort-Zur√ºcksetz-Tokens
  accounts               Account[]                    /// OAuth-Accounts (Google, GitHub etc.)
  sessions               Session[]                    /// Aktive Logins/Sessions

  // üìÖ Zeit- und Schichteintr√§ge
  shifts                 Shift[]                      /// Klassische Schichteintr√§ge
  shiftEntries           ShiftEntry[]                 /// Erweiterte Schichtdefinitionen
  weeklyTimes            WeeklyWorkingTime[]          /// Vertraglich vereinbarte Wochenstunden

  // üí∞ Lohn-Eintr√§ge
  salaryEntries          UserSalaryEntry[]            /// Individuelle Lohnzuschl√§ge o.√§.

  // üì© Einladungen und Dokumente
  createdInvitations     Invitation[]     @relation("UserToInvitations")      /// Vom Nutzer erstellte Einladungen
  editorDocuments        EditorDocument[] @relation("UserDocuments")          /// Eigene Editor-Dokumente
  sharedEditorDocuments  EditorShare[]    @relation("UserSharedDocuments")    /// Freigegebene Dokumente
}

/// Einmal-Code zur E-Mail-Verifizierung (z.‚ÄØB. f√ºr Login ohne Passwort oder Registrierung)
model VerificationCode {
  id        String   @id @default(cuid()) /// Interne ID des Verifizierungseintrags
  email     String   @unique              /// Ziel-E-Mail, f√ºr die der Code gilt
  code      String                        /// Der generierte Verifizierungscode
  expiresAt DateTime                     /// Ablaufzeitpunkt des Codes
}

/// Tempor√§rer Token zum Zur√ºcksetzen des Passworts.
/// Wird generiert, wenn ein Nutzer ‚ÄûPasswort vergessen‚Äú nutzt.
model PasswordResetToken {
  id        String   @id @default(cuid()) /// Interne ID des Tokens
  userId    String   @unique              /// Eindeutiger Bezug auf einen Nutzer
  token     String   @unique              /// Der generierte Reset-Token (z.‚ÄØB. UUID)
  expiresAt DateTime                     /// Ablaufzeitpunkt des Tokens
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) /// Beziehung zum betroffenen Nutzer
}

/// OAuth-Konten f√ºr externe Anbieter wie Google, GitHub, Apple etc.
/// Wird von NextAuth verwendet, um externe Logins zu verwalten.
model Account {
  id                String   @id @default(cuid()) /// Interne ID
  userId            String                         /// Bezug zum zugeh√∂rigen Nutzer
  type              String                         /// Typ des Kontos (z.‚ÄØB. ‚Äûoauth‚Äú)
  provider          String                         /// Anbietername (z.‚ÄØB. ‚Äûgoogle‚Äú)
  providerAccountId String                         /// Vom Anbieter vergebene Benutzer-ID

  refresh_token     String?                        /// Token zur Erneuerung des Zugriffs
  access_token      String?                        /// Aktiver Zugriffstoken
  expires_at        Int?                           /// Ablaufzeitpunkt (als UNIX-Timestamp)
  token_type        String?                        /// z.‚ÄØB. ‚ÄûBearer‚Äú
  scope             String?                        /// Angeforderte OAuth-Scopes
  id_token          String?                        /// Optionaler JWT-Token (z.‚ÄØB. f√ºr Google)
  session_state     String?                        /// Zustand der OAuth-Sitzung (z.‚ÄØB. Azure AD)

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])          /// Kombination aus Anbieter und Anbieter-ID muss eindeutig sein
}

/// Aktive Benutzersitzungen ‚Äì wird von NextAuth genutzt.
/// Dient dazu, eingeloggte Nutzer zu authentifizieren (z.‚ÄØB. per Cookie).
model Session {
  id           String   @id @default(cuid()) /// Interne ID der Sitzung
  sessionToken String   @unique              /// Sicherer Token f√ºr den Login
  userId       String                         /// Zugeh√∂riger Nutzer
  expires      DateTime                      /// Ablaufzeitpunkt der Sitzung
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Token f√ºr Magic-Link-Login oder Verifizierungen.
/// Wird z.‚ÄØB. bei passwortlosen Logins oder Best√§tigungs-E-Mails verwendet.
model VerificationToken {
  identifier String                          /// E-Mail oder Login-Identifier
  token      String   @unique                /// Sicherer Token (z.‚ÄØB. einmaliger Link)
  expires    DateTime                        /// Ablaufdatum des Tokens

  @@unique([identifier, token])              /// Kombination muss eindeutig sein
}

// ===========================
// üè¢ COMPANY & EINSTELLUNGEN
// ===========================
// In diesem Abschnitt werden Firmen (Teams) und deren Konfigurationen definiert.
// - Company: Zentrale Organisationseinheit, der Benutzer, Einladungen und Regeln zugeordnet sind
// - CompanySettings: Visuelle und farbliche Einstellungen (z.‚ÄØB. Theme, CI-Farben)
// Jede Firma kann eigene Schichten, Lohnregeln, Dokumente, Benutzer und Zeitmodelle haben.


/// Repr√§sentiert eine Firma, ein Team oder eine Organisation.
/// Jeder Nutzer kann optional einer Firma zugeordnet sein.
/// Firmen enthalten u.‚ÄØa. Nutzer, Einladungen, Lohnregeln, Zeitmodelle und Dokumente.
model Company {
  id                  String   @id @default(cuid()) /// Interne ID der Firma
  name                String                          /// Name der Firma / des Teams
  description         String?                         /// Optional: Beschreibung oder Notiz zur Firma
  createdAt           DateTime @default(now())        /// Erstellungsdatum

  users               User[]                          /// Alle Nutzer, die der Firma zugeordnet sind
  invitations         Invitation[]                    /// Alle Einladungen, die zur Firma geh√∂ren
  accessCodes         AccessCode[]                    /// Zugangscodes (z.‚ÄØB. f√ºr QR-Login)
  payRules            PayRule[]     @relation("CompanyToPayRules") /// Klassische Lohnregeln
  rules               Rule[]                          /// Zentrale Regel-Logik (Effekte, Bedingungen)
  settings            CompanySettings?                /// Visuelle Einstellungen (Farben, Theme)

  shifts              Shift[]                         /// Klassische Schichtmodelle
  salaryCategories    SalaryCategory[]                /// Benutzerdefinierte Lohnarten/Kategorien
  salaryEntries       UserSalaryEntry[]               /// Individuelle Lohnwerte pro Nutzer
  shiftDefinitions    ShiftTypeDefinition[]           /// Definition von Fr√ºh-/Sp√§t-/Nachtarten etc.
  shiftEntries        ShiftEntry[]                    /// Erweiterte Schichteintr√§ge pro Nutzer
  weeklyTimes         WeeklyWorkingTime[]             /// Vertraglich vereinbarte Wochenstunden
  documents           EditorDocument[]  @relation("CompanyDocuments") /// Eigene Editor-Dokumente
  sharedDocuments     EditorShare[]     @relation("CompanySharedDocuments") /// Freigegebene Dokumente
  salaryShiftTypes    SalaryCategoryShiftType[]       /// Zuordnung von Lohnarten zu Schichtarten
  specialPaymentRules SpecialPaymentRule[]            /// Sonderzahlungen wie Weihnachtsgeld etc.
}

/// Visuelle Einstellungen und Designoptionen f√ºr eine Firma.
/// Wird verwendet, um individuelle Farben, Themes und Hintergr√ºnde zu speichern.
model CompanySettings {
  id              String  @id @default(cuid())       /// Interne ID des Einstellungsblocks
  companyId       String  @unique                    /// Fremdschl√ºssel zur zugeh√∂rigen Firma

  themeName       String  @default("Classic Duo")    /// Name des ausgew√§hlten Themes
  useCustomColors Boolean @default(false)            /// Schalter: Eigene Farben aktiv?

  primaryColor    String?                            /// Hauptfarbe der Firma (z.‚ÄØB. Buttons)
  accentColor     String?                            /// Sekund√§rfarbe f√ºr Akzente
  bgLight         String?                            /// Hintergrundfarbe f√ºr helle Bereiche
  bgDark          String?                            /// Hintergrundfarbe f√ºr dunkle Bereiche
  textColor       String?                            /// Standardtextfarbe

  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// ===========================
// üí∏ KLASSISCHE LOHNREGELN
// ===========================
// Dieser Bereich enth√§lt klassische, direkt auswertbare Lohnregeln.
// - PayRule: Stellt einfache Regeln dar wie Stundenlohn, Zuschl√§ge, Monatsgehalt
// - SpecialPaymentRule: Regeln f√ºr Sonderzahlungen (z.‚ÄØB. Weihnachtsgeld, Schichtmix-Bonus)
// Diese Regeln k√∂nnen direkt pro Firma definiert und ausgewertet werden ‚Äì ohne Bedingungen.
// Komplexere Regeln mit Bedingungen/Effekten findest du unter ‚Äûüß† ZENTRALE REGEL-LOGIK‚Äú.

/// Klassische Lohnregel ‚Äì z.‚ÄØB. Stundenlohn, Bonus oder Pauschale.
/// Wird direkt einer Firma zugeordnet und bei der Lohnberechnung ausgewertet.
model PayRule {
  id            String     @id @default(cuid()) /// Interne ID der Regel
  companyId     String                          /// Zugeh√∂rige Firma
  company       Company    @relation("CompanyToPayRules", fields: [companyId], references: [id])

  title         String                          /// Name der Regel (z.‚ÄØB. ‚ÄûNachtzuschlag‚Äú)
  group         String?                         /// Optional: Gruppierung f√ºr die UI

  ruleKind      RuleKind                        /// PAY, BONUS oder SPECIAL
  type          PayRuleType?                    /// HOURLY oder MONTHLY (nur bei PAY)

  rate          Float?                          /// z.‚ÄØB. 12,50‚ÄØ‚Ç¨/h (bei HOURLY)
  percent       Float?                          /// z.‚ÄØB. 25‚ÄØ% (bei BONUS)
  fixedAmount   Float?                          /// z.‚ÄØB. 150‚ÄØ‚Ç¨ (bei SPECIAL)

  validFrom     DateTime?                       /// Regel gilt ab diesem Zeitpunkt
  validUntil    DateTime?                       /// Optionales Enddatum

  onlyDecember  Boolean?                        /// Gilt nur im Dezember (z.‚ÄØB. Weihnachtsgeld)
  onlyForAdmins Boolean?                        /// Gilt nur f√ºr Admins im Team
  oncePerYear   Boolean? @default(false)        /// Nur einmal j√§hrlich anwendbar?

  createdAt     DateTime   @default(now())      /// Erstellungsdatum der Regel
}

/// Sonderregel f√ºr einmalige oder j√§hrliche Zahlungen.
/// Beispiele: Weihnachtsgeld, Schichtmix-Bonus, Jubil√§umspr√§mien.
/// Die Regel kann an bestimmte Bedingungen gekn√ºpft sein (z.‚ÄØB. Dauer im Unternehmen, bestimmte Schichten).
model SpecialPaymentRule {
  id                        String   @id @default(cuid()) /// Interne ID der Sonderregel
  companyId                 String                           /// Zugeh√∂rige Firma
  title                     String                           /// Name der Regel (z.‚ÄØB. ‚ÄûWeihnachtsgeld‚Äú)
  type                      String                           /// FIXED oder PERCENT
  amount                    Float                            /// Betrag (fest oder prozentual)

  shiftMixBonus             Boolean  @default(false)         /// Nur g√ºltig bei Schichtmix (z.‚ÄØB. Fr√ºh/Sp√§t/Nacht)
  minShiftTypesPerMonth     Int?                             /// Mindestanzahl verschiedener Schichten im Monat
  requiredShiftTypeCodes    String[]                         /// Bestimmte Schichtarten, die vorkommen m√ºssen (z.‚ÄØB. ["FR√úH", "NACHT"])

  minYearsInCompany         Int?                             /// Mindestdauer in Jahren (z.‚ÄØB. 10 Jahre f√ºr Jubil√§umspr√§mie)
  appliesInMonth            Int?                             /// Gilt nur in bestimmtem Monat (z.‚ÄØB. 12 = Dezember)
  appliesOncePerYear        Boolean  @default(false)         /// Nur einmal j√§hrlich g√ºltig?

  onlyForRoles              String[]                         /// Gilt nur f√ºr bestimmte Rollen (z.‚ÄØB. ["ADMIN", "MITARBEITER"])
  proportionalToWeeklyHours Boolean  @default(false)         /// Auszahlung anteilig je nach Wochenarbeitszeit

  calculationReference      String?                          /// Bezug zur Berechnung (z.‚ÄØB. BASE_SALARY)
  note                      String?                          /// Optionaler Freitext (z.‚ÄØB. Hinweis im UI)

  active                    Boolean  @default(true)          /// Ob die Regel aktiv ist
  validFrom                 DateTime                         /// G√ºltigkeitsbeginn
  validTo                   DateTime?                        /// Optionales Enddatum

  company                   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])                                       /// Index f√ºr schnelleren Firmenzugriff
}

// ===========================
// üß† ZENTRALE REGEL-LOGIK
// ===========================
// Dieser Abschnitt bildet das Herzst√ºck eines flexiblen und skalierbaren Regelwerks.
// Anders als klassische PayRules bestehen diese Regeln aus mehreren Bausteinen:
// - Rule: Die eigentliche Regeldefinition mit Zeitraum, Priorit√§t etc.
// - Effect: Was passiert, wenn die Regel greift (z.‚ÄØB. Bonus, Abzug)
// - Condition: Wann die Regel greift (z.‚ÄØB. nur im Dezember, nur bei Nachtschicht)
// - Target: F√ºr wen die Regel gilt (z.‚ÄØB. bestimmte Nutzer, Rollen, Abteilungen)
//
// Dieses System erm√∂glicht komplexe, kombinierbare und bedingte Lohn- oder Bonusregeln.
// Ideal f√ºr zukunftssichere Lohnlogik mit vielen Parametern und Filterm√∂glichkeiten.

/// Zentrale Regeldefinition f√ºr komplexe, dynamische Lohn- oder Bonuslogik.
/// Eine Rule besteht aus Bedingungen (conditions), Effekten (effects)
/// und Zielgruppen (targets) und kann mehrfach anwendbar, zeitlich begrenzt und priorisiert sein.
model Rule {
  id               String        @id @default(cuid())    /// Interne ID der Regel
  companyId        String                                   /// Zugeh√∂rige Firma
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  title            String                                   /// Titel der Regel (z.‚ÄØB. ‚ÄûNachtbonus Dezember‚Äú)
  description      String?                                  /// Optionaler Infotext oder Hilfetext f√ºrs UI

  active           Boolean       @default(true)             /// Nur aktive Regeln werden ausgewertet
  currency         Currency      @default(EUR)              /// Auszahlung in EUR, USD, etc.
  frequencyUnit    FrequencyUnit @default(NONE)             /// Wie oft darf die Regel greifen (z.‚ÄØB. monatlich)?
  occurrenceLimit  Int?                                      /// Max. Anzahl Anwendungen pro Periode

  priority         Int           @default(0)                /// Wichtigkeit bei mehreren g√ºltigen Regeln (h√∂her = vorrangig)

  validFrom        DateTime                                 /// Startdatum der G√ºltigkeit
  validTo          DateTime?                                /// Optional: Enddatum

  effects          Effect[]                                 /// Was passiert, wenn Regel greift? (z.‚ÄØB. Bonuszahlung)
  conditions       Condition[]                              /// Unter welchen Bedingungen gilt die Regel?
  targets          Target[]                                 /// F√ºr wen gilt die Regel? (z.‚ÄØB. bestimmte Rollen oder Nutzer)

  createdAt        DateTime      @default(now())            /// Erstellungszeitpunkt
  updatedAt        DateTime      @updatedAt                 /// Automatischer Zeitstempel bei √Ñnderungen

  @@index([companyId, active])                              /// Index f√ºr schnelle Filterung aktiver Regeln pro Firma
}

/// Effekt einer Regel ‚Äì also das, was passiert, wenn die Regel greift.
/// Ein Effekt kann z.‚ÄØB. ein fixer Betrag, ein Prozentsatz oder ein Wert pro Einheit sein.
/// Eine Regel kann mehrere Effekte haben (z.‚ÄØB. Bonus + Provision).
model Effect {
  id        String       @id @default(cuid())    /// Interne ID des Effekts
  ruleId    String                                    /// Zugeh√∂rige Regel-ID
  rule      Rule         @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  kind      EffectKind                              /// FIXED, PERCENT oder RATE
  value     Float                                    /// H√∂he des Effekts (z.‚ÄØB. 150.0 oder 25.0)
  reference ReferenceType                           /// Worauf sich der Effekt bezieht (z.‚ÄØB. Stunden, Umsatz)

  note      String?                                 /// Optional: Freitext f√ºr UI (z.‚ÄØB. ‚ÄûNachtzuschlag‚Äú)
  createdAt DateTime     @default(now())            /// Zeitstempel der Erstellung
}

/// Bedingung, die erf√ºllt sein muss, damit eine Regel greift.
/// Eine Regel kann mehrere Conditions haben (UND-Verkn√ºpfung).
/// Beispiel: ‚Äûmonth = 12‚Äú ODER ‚ÄûshiftType IN [‚ÄòNACHT‚Äô, ‚ÄòSP√ÑT‚Äô]‚Äú.
model Condition {
  id        String   @id @default(cuid())         /// Interne ID der Bedingung
  ruleId    String                                  /// Zugeh√∂rige Regel-ID
  rule      Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  attribute String                                 /// Zu pr√ºfendes Attribut (z.‚ÄØB. ‚Äûmonth‚Äú, ‚ÄûshiftType‚Äú, ‚ÄûyearsInCompany‚Äú)
  operator  Operator                               /// Vergleichsoperator (z.‚ÄØB. EQ, IN, BETWEEN)
  jsonValue Json                                   /// Vergleichswert(e) im JSON-Format
                                                   /// z.‚ÄØB. 12 f√ºr Dezember, ["FR√úH", "SP√ÑT"], { "min": 10, "max": 20 }

  createdAt DateTime @default(now())              /// Zeitstempel der Erstellung
}

/// Zieldefinition einer Regel ‚Äì legt fest, f√ºr wen die Regel gilt.
/// Eine Regel kann mehrere Targets haben.
/// Beispiel: Nur f√ºr Rolle ‚ÄûMITARBEITER‚Äú oder Nutzer-ID ‚Äûu123‚Äú.
model Target {
  id        String   @id @default(cuid())         /// Interne ID des Targets
  ruleId    String                                  /// Zugeh√∂rige Regel-ID
  rule      Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  type      String                                 /// Zieltyp (z.‚ÄØB. "USER", "ROLE", "DEPARTMENT")
  value     String                                 /// Konkreter Wert (z.‚ÄØB. Nutzer-ID, Rollencode etc.)

  createdAt DateTime @default(now())              /// Zeitstempel der Erstellung
}

/// Zugangscode f√ºr Teams ‚Äì z.‚ÄØB. zum Beitritt per QR-Code oder Zugangsliste.
/// Kann optional mit Passwortschutz versehen und zeitlich begrenzt werden.
model AccessCode {
  id              String   @id @default(cuid())             /// Interne ID des Zugangscodes
  code            String                                    /// Der eigentliche Zugangscode (z.‚ÄØB. f√ºr QR)
  companyId       String                                    /// Zugeh√∂rige Firma
  role            String                                    /// Rolle, die der Nutzer nach Beitritt erh√§lt
  validFrom       DateTime                                  /// G√ºltig ab
  validUntil      DateTime                                  /// G√ºltig bis
  requirePassword Boolean  @default(true)                   /// Ist ein zus√§tzliches Passwort n√∂tig?
  password        String?                                   /// Optionales Passwort (wenn aktiviert)
  createdAt       DateTime @default(now())                  /// Erstellungszeitpunkt

  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([code, companyId], name: "code_companyId")       /// Kombination aus Code und Firma muss eindeutig sein
}

/// Protokollierung sicherheitsrelevanter oder administrativer Aktionen.
/// Dient zur Nachvollziehbarkeit von √Ñnderungen (z.‚ÄØB. Rollenwechsel, L√∂schungen).
model AuditLog {
  id        String   @id @default(cuid()) /// Interne ID des Logeintrags
  userId    String                         /// ID des Nutzers, der die Aktion ausgel√∂st hat
  action    String                         /// Beschreibung der Aktion (z.‚ÄØB. "TEAM_DELETED", "INVITE_SENT")
  ip        String                         /// IP-Adresse, von der die Aktion ausging
  timestamp DateTime                      /// Zeitpunkt der Aktion
}

/// Nutzerdefiniertes Dokument im Editor-System.
/// Kann Text, Layout, QR-Codes oder Bilder enthalten und ist im A4-/A5-/A6-Format speicherbar.
/// Dokumente k√∂nnen privat, teamintern oder √∂ffentlich freigegeben werden.
model EditorDocument {
  id         String     @id @default(cuid())       /// Interne ID des Dokuments
  title      String                                 /// Titel/Name des Dokuments
  content    Json                                   /// Inhalt im JSON-Format (z.‚ÄØB. Konva-Canvas)
  format     String     @default("a4")              /// Format: "a4", "a5", "a6" etc.

  ownerId    String?                                /// Optional: Ersteller des Dokuments
  companyId  String?                                /// Optional: Zugeh√∂rige Firma (bei Teamdokumenten)

  visibility Visibility @default(PRIVATE)           /// Sichtbarkeit (PRIVATE, TEAM, SHARED, PUBLIC)

  createdAt  DateTime   @default(now())             /// Erstellungszeitpunkt
  updatedAt  DateTime   @updatedAt                  /// Letzte Bearbeitung

  owner      User?      @relation("UserDocuments", fields: [ownerId], references: [id])
  company    Company?   @relation("CompanyDocuments", fields: [companyId], references: [id])
  shares     EditorShare[]                          /// Liste von Freigaben f√ºr andere Nutzer oder Firmen
}

/// Freigabe eines Editor-Dokuments f√ºr andere Nutzer oder Firmen.
/// Erm√∂glicht gezieltes Teilen von Inhalten (z.‚ÄØB. ‚Äûsichtbar, aber nicht bearbeitbar‚Äú).
model EditorShare {
  id                  String         @id @default(cuid()) /// Interne ID der Freigabe

  documentId          String                          /// Verweis auf das freigegebene Dokument
  sharedWithUserId    String?                         /// Optional: Nutzer, der Zugriff erh√§lt
  sharedWithCompanyId String?                         /// Optional: ganze Firma mit Zugriff

  canEdit             Boolean        @default(false)   /// Darf das Dokument bearbeitet werden?

  createdAt           DateTime       @default(now())   /// Zeitstempel der Freigabe

  document            EditorDocument @relation(fields: [documentId], references: [id])
  sharedWithUser      User?          @relation("UserSharedDocuments", fields: [sharedWithUserId], references: [id])
  sharedWithCompany   Company?       @relation("CompanySharedDocuments", fields: [sharedWithCompanyId], references: [id])
}

/// Einladung zum Team ‚Äì z.‚ÄØB. via QR-Code, Link oder E-Mail.
/// Kann einmalig, zeitlich begrenzt oder passwortgesch√ºtzt sein.
/// Unterst√ºtzt Druckoptionen (z.‚ÄØB. f√ºr Aushang mit √úberschrift, Text und Logo).
model Invitation {
  id            String   @id @default(cuid())   /// Interne ID der Einladung
  token         String   @unique                /// Einmaliger Einladungstoken (f√ºr Link oder QR-Code)
  companyId     String                          /// Zugeh√∂rige Firma
  role          String                          /// Rolle, die beim Beitritt vergeben wird

  createdAt     DateTime @default(now())        /// Erstellungszeitpunkt
  expiresAt     DateTime                        /// Ablaufdatum (z.‚ÄØB. nach 30 Tagen)

  used          Boolean  @default(false)        /// Wurde die Einladung bereits verwendet?

  createdBy     String?                         /// (Veraltet?) ggf. Name oder ID des Erstellers
  createdById   String?                         /// Verweis auf den Nutzer, der die Einladung erstellt hat
  createdByUser User?    @relation("UserToInvitations", fields: [createdById], references: [id])

  note          String?                         /// Interne Notiz zur Einladung
  type          String                          /// Einladungs-Typ (z.‚ÄØB. "qr_simple", "single_use")

  password      String?                         /// Optionales Passwort (nur bei gesch√ºtzten Einladungen)

  printTitle    String?                         /// √úberschrift f√ºr den Ausdruck (‚ÄûWillkommen bei XYZ‚Äú)
  printText     String?                         /// Beschreibungstext f√ºr den Ausdruck
  printLogo     String?                         /// Pfad oder URL zum Logo (f√ºr Ausdruck)

  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

/// üí∞ Lohnart bzw. Gehaltskomponente.
/// Beispiel: Stundenlohn, Nachtschicht-Zuschlag, Fahrgeld.
/// Kann sowohl feste Werte, Prozentwerte, als auch formelbasierte Berechnungen enthalten.
/// Optional einschr√§nkbar auf bestimmte Schichtarten.
model SalaryCategory {
  id              String   @id @default(cuid())      /// Interne ID

  // === Firmenbezug ===
  companyId       String?                             /// Firma, der diese Kategorie geh√∂rt (Solo-User = optional)
  company         Company? @relation(fields: [companyId], references: [id])

  // === Bezeichnung & Beschreibung ===
  name            String                              /// Name der Lohnart (z.‚ÄØB. ‚ÄûZuschlag Nachtarbeit‚Äú)
  description     String?                             /// Erkl√§rung oder Tooltip im UI

  // === Technische Konfiguration ===
  inputType       String                              /// Eingabetyp: z.‚ÄØB. ‚Äûnumber‚Äú, ‚Äûboolean‚Äú, ‚Äûselect‚Äú (f√ºr UI)
  calculationMode String?                             /// Optional: ‚Äûsum‚Äú, ‚Äûavg‚Äú, ‚Äûcustom‚Äú, ‚Äûformula‚Äú
  formula         String?                             /// Optional: Formel wie ‚ÄûBASE * 0.25‚Äú f√ºr dynamische Berechnung
  defaultValue    Float?                              /// Vorgabewert, wenn Benutzer nichts eintr√§gt

  // === Verhalten im UI ===
  userSelectable  Boolean   @default(true)            /// Darf der Nutzer sie selbst zuweisen?
  required        Boolean   @default(false)           /// Muss zwingend gesetzt werden (z.‚ÄØB. bei Grundlohn)?
  hidden          Boolean   @default(false)           /// Wird im UI ausgeblendet?
  multiContext    Boolean   @default(false)           /// Kann mehrfach pro Schicht-Kontext verwendet werden?

  // === G√ºltigkeit & Zeitbereich ===
  validFrom       DateTime                            /// Ab wann ist die Lohnart g√ºltig?
  validTo         DateTime?                           /// Bis wann (optional, offen = dauerhaft g√ºltig)

  createdAt       DateTime   @default(now())          /// Wann wurde die Lohnart erstellt?

  // === Relationen ===
  entries         UserSalaryEntry[]                   /// Konkrete Zuweisungen pro Nutzer
  shiftTypes      SalaryCategoryShiftType[]           /// Einschr√§nkbar auf bestimmte Schichtarten (optional)
}

/// Verkn√ºpft eine Lohnart (SalaryCategory) mit einer bestimmten Schichtart.
/// Beispiel: ‚ÄûNachtschicht-Zuschlag‚Äú gilt nur bei Schichttyp = ‚ÄûNACHT‚Äú.
model SalaryCategoryShiftType {
  id         String         @id @default(cuid())  /// Interne ID

  categoryId String                               /// Verweis auf die zugeh√∂rige Lohnkategorie
  category   SalaryCategory @relation(fields: [categoryId], references: [id])

  companyId  String?                              /// Firma, optional (f√ºr teambasierte Einschr√§nkung)
  company    Company?       @relation(fields: [companyId], references: [id])

  shiftType  String                               /// Technischer Code des Schichttyps (z.‚ÄØB. "NACHT", "FR√úH")
  contextTag String?                              /// Optionaler Kontextfilter (z.‚ÄØB. "Feiertag", "Samstag")

  @@unique([categoryId, shiftType])               /// Eine Kombination aus Lohnkategorie + Schichttyp darf nur einmal vorkommen
}

/// Klassische Schichteintr√§ge ‚Äì einfache Start-/Endzeit + Pause.
/// Wird haupts√§chlich f√ºr die manuelle Erfassung verwendet.
model Shift {
  id           String   @id @default(cuid())   /// Interne ID der Schicht

  userId       String                         /// Verweis auf den Nutzer
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId    String                         /// Verweis auf die Firma
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  startTime    DateTime                       /// Beginn der Schicht
  endTime      DateTime                       /// Ende der Schicht

  breakMinutes Int      @default(0)           /// Pausenzeit in Minuten (unbezahlt)
  createdAt    DateTime @default(now())       /// Zeitpunkt der Erfassung (z.‚ÄØB. f√ºr Sortierung)
}

/// Moderne Schichtstruktur mit Zuordnung zu Schicht-Typen.
/// Unterst√ºtzt Nachtschichten, Sonderformen, Pausenlogik, manuelle Anpassungen usw.
model ShiftEntry {
  id             String              @id @default(cuid())   /// Interne ID der Schicht

  userId         String                                     /// Nutzer-ID
  user           User                @relation(fields: [userId], references: [id])

  companyId      String?                                    /// Firma (optional f√ºr Solo-Nutzer)
  company        Company?            @relation(fields: [companyId], references: [id])

  shiftTypeId    String                                     /// Referenz auf Schichtdefinition (z.‚ÄØB. "Fr√ºh", "Sp√§t", "Nacht")
  shiftType      ShiftTypeDefinition @relation(fields: [shiftTypeId], references: [id])

  date           DateTime                                   /// Datum der Schicht (nur Kalendertag, ohne Uhrzeit)
  start          DateTime                                   /// Startzeit der Schicht
  end            DateTime                                   /// Endzeit der Schicht

  pauseMinutes   Int                 @default(0)            /// Pausenzeit in Minuten (ggf. unbezahlt, siehe Schichttyp)
  manualOverride Boolean             @default(false)        /// Manuell angepasst (√ºberschreibt Automatik)
  comment        String?                                    /// Freitext f√ºr Bemerkungen
  createdAt      DateTime            @default(now())        /// Zeitstempel zur Dokumentation
}

/// Definition einer Schichtart (z.‚ÄØB. Fr√ºh, Sp√§t, Nacht)
/// Legt Start-/Endzeiten, Nachtzuschl√§ge und Logik f√ºr Pausen fest.
model ShiftTypeDefinition {
  id          String       @id @default(cuid())   /// Interne ID der Schichtdefinition

  companyId   String?                                /// Firma (optional ‚Äì auch f√ºr private Nutzung)
  company     Company?     @relation(fields: [companyId], references: [id])

  name        String                                /// Anzeigename (z.‚ÄØB. "Fr√ºhschicht")
  code        String?                               /// Kurzcode (z.‚ÄØB. "FS" oder "NACHT")

  startTime   String                                /// Schichtbeginn (als Uhrzeit-String, z.‚ÄØB. "06:00")
  endTime     String                                /// Schichtende (z.‚ÄØB. "14:30")

  nightStart  String?                               /// Beginn des Nachtzeitraums (z.‚ÄØB. "22:00"), optional
  nightEnd    String?                               /// Ende des Nachtzeitraums (z.‚ÄØB. "06:00"), optional
  nightBonus  Float?                                /// Nachtzuschlag in Prozent (z.‚ÄØB. 25.0 f√ºr 25‚ÄØ%)

  pauseIsPaid Boolean      @default(false)          /// Gibt an, ob die Pausen bezahlt sind
  contextTag  String?                               /// Optionaler Kontext-Tag f√ºr spezielle Regeln/Zuordnungen

  createdAt   DateTime     @default(now())          /// Erstellungszeitpunkt
  shifts      ShiftEntry[]                          /// Verkn√ºpfte Schicht-Eintr√§ge
}

/// Interner Superadmin-Eintrag (z.‚ÄØB. f√ºr ToDos, Ideen, Statusverfolgung)
model SuperadminBoardEntry {
  id              String    @id @default(cuid())    /// Eindeutige ID

  title           String                          /// Kurzer Titel (z.‚ÄØB. "Export-Feature fertigstellen")
  status          String                          /// Status (z.‚ÄØB. "offen", "in Arbeit", "erledigt")
  category        String[]                         /// Eine oder mehrere Kategorien (z.‚ÄØB. ["Editor", "Backend"])
  notes           String?                          /// Optionale Zusatzinfos oder Kommentare

  createdAt       DateTime  @default(now())        /// Zeitpunkt der Erstellung
  completedAt     DateTime?                        /// Wann wurde es abgeschlossen?
  updatedByImport Boolean   @default(false)        /// Wurde der Eintrag automatisch erzeugt?
}

/// Einzelner Gehaltswert eines Users ‚Äì z.‚ÄØB. Stundenlohn, Monatsgehalt, Zuschl√§ge etc.
/// Diese Eintr√§ge basieren auf frei definierbaren Kategorien (SalaryCategory)
model UserSalaryEntry {
  id         String         @id @default(cuid())    /// Eindeutige ID

  userId     String                                    /// Referenz auf den betroffenen Nutzer
  companyId  String?                                   /// Optional: Firma, zu der der Eintrag geh√∂rt (f√ºr Teamkontext)
  categoryId String                                    /// Gehaltskategorie (z.‚ÄØB. "Grundgehalt", "Wechselschicht-Zuschlag")

  amount     Float                                     /// Eingetragener Wert (z.‚ÄØB. 17.5 = 17,50 ‚Ç¨ / h oder %)
  validFrom  DateTime                                  /// Beginn der G√ºltigkeit
  validTo    DateTime?                                 /// Optionales Enddatum (z.‚ÄØB. bei befristeten L√∂hnen)

  note       String?                                   /// Optionale Notiz zum Eintrag (z.‚ÄØB. "Tarifvertrag 2025")
  createdAt  DateTime       @default(now())            /// Wann wurde der Eintrag erstellt?

  user       User           @relation(fields: [userId], references: [id])
  company    Company?       @relation(fields: [companyId], references: [id])
  category   SalaryCategory @relation(fields: [categoryId], references: [id])

  /// Index f√ºr schnelle Suche nach Eintr√§gen eines Nutzers in einer Kategorie
  @@index([userId, companyId, categoryId, validFrom])
}

/// W√∂chentliche Soll-Arbeitszeit eines Nutzers.
/// Grundlage f√ºr √úberstundenberechnung, Zeitkonten oder anteilige Zahlungen.
model WeeklyWorkingTime {
  id           String    @id @default(cuid())     /// Eindeutige ID

  userId       String                              /// Referenz auf den Nutzer
  companyId    String?                             /// Optional: Firma (f√ºr Teamkontext)
  hoursPerWeek Float                               /// Sollstunden pro Woche (z.‚ÄØB. 40.0, 30.5)

  validFrom    DateTime                            /// Ab wann gilt diese Regelung?
  validTo      DateTime?                           /// Bis wann? (optional, offen = aktuell g√ºltig)

  createdAt    DateTime  @default(now())           /// Wann wurde der Eintrag erstellt?

  user         User      @relation(fields: [userId], references: [id])
  company      Company?  @relation(fields: [companyId], references: [id])
}