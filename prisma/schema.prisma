generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  emailVerified   DateTime?
  password        String?
  name            String?
  nickname        String?
  image           String?
  verified        Boolean              @default(false)
  isAdmin         Boolean              @default(false)
  createdAt       DateTime             @default(now())
  resetTokens     PasswordResetToken[]
  hasChosenMode   Boolean              @default(false)
  promotedToAdmin Boolean              @default(false)
  lastLogin       DateTime?

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  role      String?
  invited   Boolean  @default(false)
  accepted  Boolean  @default(true)

  showName     Boolean @default(true)
  showNickname Boolean @default(false)
  showEmail    Boolean @default(false)

  accounts              Account[]
  sessions              Session[]
  shifts                Shift[]
  createdInvitations    Invitation[]        @relation("UserToInvitations")
  editorDocuments       EditorDocument[]    @relation("UserDocuments")
  sharedEditorDocuments EditorShare[]       @relation("UserSharedDocuments")
  salaryEntries         UserSalaryEntry[]
  weeklyTimes           WeeklyWorkingTime[]
  shiftEntries          ShiftEntry[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  ip        String
  timestamp DateTime
}

model SuperadminBoardEntry {
  id              String    @id @default(cuid())
  title           String
  status          String
  category        String[]
  notes           String?
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  updatedByImport Boolean   @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                    String                    @id @default(cuid())
  name                  String
  description           String?
  createdAt             DateTime                  @default(now())
  users                 User[]
  invitations           Invitation[]
  accessCodes           AccessCode[]
  payRules              PayRule[]                 @relation("CompanyToPayRules")
  settings              CompanySettings?
  shifts                Shift[]
  salaryCategories      SalaryCategory[]
  salaryEntries         UserSalaryEntry[]
  shiftDefinitions      ShiftTypeDefinition[]
  shiftEntries          ShiftEntry[]
  weeklyTimes           WeeklyWorkingTime[]
  documents             EditorDocument[]          @relation("CompanyDocuments")
  sharedDocuments       EditorShare[]             @relation("CompanySharedDocuments")
  salaryShiftTypes      SalaryCategoryShiftType[]
  specialPaymentRules   SpecialPaymentRule[]
}

model CompanySettings {
  id              String  @id @default(cuid())
  companyId       String  @unique
  themeName       String  @default("Classic Duo")
  useCustomColors Boolean @default(false)
  primaryColor    String?
  accentColor     String?
  bgLight         String?
  bgDark          String?
  textColor       String?
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model PayRule {
  id             String   @id @default(cuid())
  companyId      String
  company        Company  @relation("CompanyToPayRules", fields: [companyId], references: [id])
  title          String
  group          String? 
  ruleKind       RuleKind
  type           PayRuleType?
  rate           Float?
  percent        Float?
  fixedAmount    Float?
  validFrom      DateTime?   
  validUntil     DateTime?   
  onlyDecember   Boolean?    
  onlyForAdmins  Boolean?    
  perYear        Boolean?    
  referenceType  ReferenceType? 
  createdAt      DateTime  @default(now())
}

enum RuleKind {
  PAY
  BONUS
  SPECIAL
}

enum PayRuleType {
  HOURLY
  MONTHLY
}

enum ReferenceType {
  BASE_SALARY
  ACTUAL_HOURS
  FIXED_AMOUNT
}

model SpecialPaymentRule {
  id                         String   @id @default(cuid())
  companyId                  String
  title                      String              // z. B. Weihnachtsgeld, Schichtmix-Bonus
  type                       String              // 'FIXED' oder 'PERCENT'
  amount                     Float               // Betrag oder Prozentwert (je nach type)
  shiftMixBonus              Boolean  @default(false) // Nur wenn unterschiedliche Schichten vorkommen
  minShiftTypesPerMonth      Int?                // z. B. mindestens 2 Schichtarten im Monat
  requiredShiftTypeCodes     String[]            // z. B. ['Früh', 'Spät', 'Nacht']
  minYearsInCompany          Int?                // z. B. für 10-Jahres-Bonus
  appliesInMonth             Int?                // Nur in bestimmten Monaten (z. B. 12 = Dezember)
  appliesOncePerYear         Boolean  @default(false) // z. B. für jährliche Boni
  onlyForRoles               String[]            // z. B. ['ADMIN', 'MITARBEITER']
  proportionalToWeeklyHours  Boolean  @default(false) // Auszahlung anteilig zur Wochenarbeitszeit
  calculationReference       String?             // 'BASE_SALARY', 'ACTUAL_HOURS', etc.
  note                       String?             // Freitext-Hinweis oder Info
  active                     Boolean  @default(true)
  validFrom                  DateTime            // Gültigkeitsbeginn
  validTo                    DateTime?           // Optionales Enddatum

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Shift {
  id           String   @id @default(cuid())
  userId       String
  companyId    String
  startTime    DateTime
  endTime      DateTime
  breakMinutes Int      @default(0)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Invitation {
  id          String   @id @default(cuid())
  token       String   @unique
  companyId   String
  role        String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
  createdBy   String?
  note        String?
  type        String
  password    String?
  createdById String?
  printTitle  String?
  printText   String?
  printLogo   String?
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser User?  @relation("UserToInvitations", fields: [createdById], references: [id])
}

model AccessCode {
  id              String   @id @default(cuid())
  code            String
  companyId       String
  role            String
  validFrom       DateTime
  validUntil      DateTime
  requirePassword Boolean  @default(true)
  password        String?
  createdAt       DateTime @default(now())
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([code, companyId], name: "code_companyId")
}

model EditorDocument {
  id         String     @id @default(cuid())
  title      String
  content    Json
  format     String     @default("a4")
  ownerId    String?
  companyId  String?
  visibility Visibility @default(PRIVATE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  owner      User?      @relation("UserDocuments", fields: [ownerId], references: [id])
  company    Company?   @relation("CompanyDocuments", fields: [companyId], references: [id])
  shares     EditorShare[]
}

model EditorShare {
  id                  String   @id @default(cuid())
  documentId          String
  sharedWithUserId    String?
  sharedWithCompanyId String?
  canEdit             Boolean  @default(false)
  createdAt           DateTime @default(now())
  document            EditorDocument @relation(fields: [documentId], references: [id])
  sharedWithUser      User?          @relation("UserSharedDocuments", fields: [sharedWithUserId], references: [id])
  sharedWithCompany   Company?       @relation("CompanySharedDocuments", fields: [sharedWithCompanyId], references: [id])
}

enum Visibility {
  PRIVATE
  TEAM
  SHARED
  PUBLIC
}

model SalaryCategory {
  id              String    @id @default(cuid())
  companyId       String?
  name            String
  description     String?
  inputType       String
  calculationMode String?
  formula         String?
  defaultValue    Float?
  userSelectable  Boolean   @default(true)
  required        Boolean   @default(false)
  hidden          Boolean   @default(false)
  multiContext    Boolean   @default(false)
  validFrom       DateTime
  validTo         DateTime?
  createdAt       DateTime  @default(now())
  company         Company?  @relation(fields: [companyId], references: [id])
  entries         UserSalaryEntry[]
  shiftTypes      SalaryCategoryShiftType[]
}

model SalaryCategoryShiftType {
  id         String  @id @default(cuid())
  categoryId String
  companyId  String?
  shiftType  String
  contextTag String?
  category   SalaryCategory @relation(fields: [categoryId], references: [id])
  company    Company?       @relation(fields: [companyId], references: [id])

  @@unique([categoryId, shiftType])
}

model UserSalaryEntry {
  id         String    @id @default(cuid())
  userId     String
  companyId  String?
  categoryId String
  amount     Float
  validFrom  DateTime
  validTo    DateTime?
  note       String?
  createdAt  DateTime  @default(now())
  user       User           @relation(fields: [userId], references: [id])
  company    Company?       @relation(fields: [companyId], references: [id])
  category   SalaryCategory @relation(fields: [categoryId], references: [id])

  @@index([userId, companyId, categoryId, validFrom])
}

model WeeklyWorkingTime {
  id           String    @id @default(cuid())
  userId       String
  companyId    String?
  hoursPerWeek Float
  validFrom    DateTime
  validTo      DateTime?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  company      Company?  @relation(fields: [companyId], references: [id])
}

model ShiftTypeDefinition {
  id          String   @id @default(cuid())
  companyId   String?
  name        String
  code        String?
  startTime   String
  endTime     String
  nightStart  String?
  nightEnd    String?
  nightBonus  Float?
  pauseIsPaid Boolean  @default(false)
  contextTag  String?
  createdAt   DateTime @default(now())
  company     Company? @relation(fields: [companyId], references: [id])
  shifts      ShiftEntry[]
}

model ShiftEntry {
  id             String   @id @default(cuid())
  userId         String
  companyId      String?
  shiftTypeId    String
  date           DateTime
  start          DateTime
  end            DateTime
  pauseMinutes   Int      @default(0)
  manualOverride Boolean  @default(false)
  comment        String?
  createdAt      DateTime @default(now())
  user           User                @relation(fields: [userId], references: [id])
  company        Company?            @relation(fields: [companyId], references: [id])
  shiftType      ShiftTypeDefinition @relation(fields: [shiftTypeId], references: [id])
}
